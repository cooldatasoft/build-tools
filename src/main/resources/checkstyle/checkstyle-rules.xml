<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
        "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
        "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">


<module name="Checker">
    <property name="charset" value="UTF-8"/>
    <property name="severity" value="warning"/>
    <!--
        If you set the basedir property below, then all reported file
        names will be relative to the specified directory. See
        http://checkstyle.sourceforge.net/5.x/config.html#Checker

        <property name="basedir" value="${basedir}"/>
    -->

    <property name="fileExtensions" value="java, properties, xml"/>

    <!-- Checks that a package-info.java file exists for each package.     -->
    <!-- See http://checkstyle.sf.net/config_javadoc.html#JavadocPackage -->
    <!--<module name="JavadocPackage"/>-->

    <!-- Checks whether files end with a new line.                        -->
    <!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->
    <module name="NewlineAtEndOfFile">
        <property name="lineSeparator" value="lf"/>
    </module>

    <!-- Checks that property files contain the same keys.         -->
    <!-- See http://checkstyle.sf.net/config_misc.html#Translation -->
    <module name="Translation"/>

    <!-- Checks for Size Violations.                    -->
    <!-- See http://checkstyle.sf.net/config_sizes.html -->
    <module name="FileLength">
        <property name="max" value="2000"/>
    </module>

    <!-- Checks for whitespace                               -->
    <!-- See http://checkstyle.sf.net/config_whitespace.html -->
    <module name="FileTabCharacter">
        <property name="eachLine" value="true"/>
    </module>

    <!-- Miscellaneous other checks.                   -->
    <!-- See http://checkstyle.sf.net/config_misc.html -->
    <module name="RegexpSingleline">
        <property name="format" value="\s+$"/>
        <property name="minimum" value="0"/>
        <property name="maximum" value="0"/>
        <property name="message" value="Line has trailing spaces."/>
    </module>

    <module name="RegexpMultiline">
        <property name="format" value="\r\n"/>
        <property name="message" value="CRLF line endings are prohibited"/>
    </module>

    <!-- Checks for Headers                                -->
    <!-- See http://checkstyle.sf.net/config_header.html   -->
    <!-- <module name="Header"> -->
    <!--   <property name="headerFile" value="${com.puppycrawl.tools.checkstyle.header.file}"/> -->
    <!--   <property name="fileExtensions" value="java"/> -->
    <!-- </module> -->

    <!-- Checks for Size Violations.                    -->
    <!-- See http://checkstyle.sf.net/config_sizes.html -->
    <module name="LineLength">
        <property name="max" value="160"/>
        <property name="ignorePattern" value="^package.*|^import.*|a href|href|http://|https://|ftp://"/>
    </module>


    <module name="TreeWalker">

        <!-- http://checkstyle.sourceforge.net/config_misc.html#OuterTypeFilename -->
        <module name="OuterTypeFilename">
            <property name="severity" value="error"/>
        </module>

        <module name="IllegalTokenText">
            <property name="tokens" value="STRING_LITERAL, CHAR_LITERAL"/>
            <property name="format"
                      value="\\u00(08|09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)"/>
            <property name="message" value="Avoid using corresponding octal or Unicode escape."/>
        </module>

        <module name="AvoidEscapedUnicodeCharacters">
            <property name="allowEscapesForControlCharacters" value="true"/>
            <property name="allowByTailComment" value="true"/>
            <property name="allowNonPrintableEscapes" value="true"/>
        </module>

        <!-- Checks for Javadoc comments.                     -->
        <!-- See http://checkstyle.sf.net/config_javadoc.html -->
        <!--<module name="JavadocType">-->
        <!--<property name="authorFormat" value="\S"/>-->
        <!--</module>-->

        <!--<module name="JavadocVariable"/>-->
        <!--<module name="JavadocStyle"/>-->
        <module name="JavadocParagraph"/>
        <module name="AtclauseOrder">
            <property name="tagOrder" value="@param, @return, @throws, @deprecated"/>
            <property name="target" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF"/>
        </module>
        <!--<module name="JavadocMethod">-->
        <!--<property name="scope" value="public"/>-->
        <!--<property name="minLineCount" value="2"/>-->
        <!--<property name="allowUndeclaredRTE" value="true"/>-->
        <!--</module>-->

        <!-- Checks for Naming Conventions.                  -->
        <!-- See http://checkstyle.sf.net/config_naming.html -->
        <module name="ConstantName">
            <property name="severity" value="error"/>
        </module>

        <module name="LocalFinalVariableName">
            <property name="severity" value="error"/>
        </module>

        <module name="LocalVariableName">
            <property name="tokens" value="VARIABLE_DEF"/>
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
            <property name="allowOneCharVarInForLoop" value="true"/>
            <message key="name.invalidPattern" value="Local variable name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <module name="ClassTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern" value="Class type name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <module name="MethodTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern" value="Method type name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <module name="InterfaceTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern" value="Interface type name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <module name="NoFinalizer"/>

        <module name="MemberName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern" value="Member name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <module name="ParameterName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern" value="Parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <module name="MethodName">
            <property name="severity" value="error"/>
        </module>

        <module name="ReturnCount">
            <property name="max" value="1"/>
            <property name="maxForVoid" value="0"/>
        </module>

        <module name="PackageName">
            <property name="severity" value="error"/>
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
            <message key="name.invalidPattern" value="Package name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <module name="StaticVariableName">
            <property name="severity" value="error"/>
        </module>

        <module name="TypeName">
            <property name="severity" value="error"/>
            <message key="name.invalidPattern" value="Type name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <module name="SingleLineJavadoc">
            <property name="ignoreInlineTags" value="false"/>
        </module>

        <module name="OneTopLevelClass"/>

        <module name="NoLineWrap"/>

        <!-- defaults to sun.* packages -->
        <module name="IllegalImport">
            <property name="severity" value="error"/>
            <property name="illegalPkgs" value="org.apache.log4j,java.util.logging"/>
        </module>

        <module name="RedundantImport">
            <property name="severity" value="error"/>
        </module>

        <module name="UnusedImports">
            <property name="severity" value="error"/>
            <property name="processJavadoc" value="false"/>
        </module>

        <module name="MethodLength"/>
        <module name="ParameterNumber"/>

        <!-- Checks for whitespace                               -->
        <!-- See http://checkstyle.sf.net/config_whitespace.html -->
        <module name="EmptyForIteratorPad"/>
        <module name="GenericWhitespace">
            <property name="severity" value="error"/>
            <message key="ws.illegalFollow" value="GenericWhitespace ''{0}'' should followed by whitespace."/>
            <message key="ws.notPreceded" value="GenericWhitespace ''{0}'' is not preceded with whitespace."/>
        </module>

        <module name="AbbreviationAsWordInName">
            <property name="ignoreFinal" value="false"/>
            <property name="allowedAbbreviationLength" value="3"/>
        </module>

        <module name="Indentation">
            <property name="basicOffset" value="4"/>
            <property name="braceAdjustment" value="0"/>
            <property name="caseIndent" value="2"/>
            <property name="throwsIndent" value="4"/>
            <property name="lineWrappingIndentation" value="4"/>
            <property name="arrayInitIndent" value="8"/>
        </module>

        <module name="NonEmptyAtclauseDescription"/>

        <module name="JavadocTagContinuationIndentation"/>

        <!--<module name="SummaryJavadoc">-->
        <!--<property name="forbiddenSummaryFragments" value="^@return the *|^This method returns |^A [{]@code [a-zA-Z0-9]+[}]( is a )"/>-->
        <!--</module>-->

        <module name="MethodParamPad">
            <property name="severity" value="error"/>
        </module>

        <module name="NoWhitespaceAfter">
            <property name="severity" value="error"/>
        </module>

        <module name="NoWhitespaceBefore">
            <property name="severity" value="error"/>
        </module>

        <module name="OperatorWrap">
            <property name="option" value="NL"/>
            <property name="tokens"
                      value="BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR, LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR "/>
        </module>

        <module name="AnnotationLocation">
            <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF"/>
        </module>

        <module name="AnnotationLocation">
            <property name="tokens" value="VARIABLE_DEF"/>
            <property name="allowSamelineMultipleAnnotations" value="true"/>
        </module>

        <module name="ParenPad"/>

        <module name="TypecastParenPad">
            <property name="option" value="nospace"/>
        </module>

        <module name="WhitespaceAfter"/>

        <module name="WhitespaceAround">
            <property name="severity" value="error"/>
            <property name="tokens" value="
                    ASSIGN,
	                BAND,
					BAND_ASSIGN,
					BOR,
					BOR_ASSIGN,
					BSR,
					BSR_ASSIGN,
					BXOR,
					BXOR_ASSIGN,
					COLON,
					DIV,
					DIV_ASSIGN,
					EQUAL,
					GE,
					GT,
					LAND,
					LCURLY,
					LE,
					LITERAL_ASSERT,
					LITERAL_CATCH,
					LITERAL_DO,
					LITERAL_ELSE,
					LITERAL_FINALLY,
					LITERAL_FOR,
					LITERAL_IF,
					LITERAL_RETURN,
					LITERAL_SYNCHRONIZED,
					LITERAL_TRY,
					LITERAL_WHILE,
					LOR,
					LT,
					MINUS,
					MINUS_ASSIGN,
					MOD,
					MOD_ASSIGN,
					NOT_EQUAL,
					PLUS,
					PLUS_ASSIGN,
					QUESTION,
					RCURLY,
					SL,
					SLIST,
					SL_ASSIGN,
					SR,
					SR_ASSIGN,
					STAR,
					STAR_ASSIGN,
					TYPE_EXTENSION_AND"/>
        </module>

        <module name="OneStatementPerLine"/>

        <!-- Each variable should be declared individually -->
        <module name="MultipleVariableDeclarations">
            <property name="severity" value="error"/>
        </module>

        <!-- Disallow non-commented swicth fall through -->
        <module name="FallThrough"/>

        <module name="EmptyLineSeparator">
            <property name="severity" value="error"/>
            <property name="allowNoEmptyLineBetweenFields" value="true"/>
        </module>

        <module name="SeparatorWrap">
            <property name="tokens" value="DOT"/>
            <property name="option" value="nl"/>
        </module>
        <module name="SeparatorWrap">
            <property name="tokens" value="COMMA"/>
            <property name="option" value="EOL"/>
        </module>

        <!-- Modifier Checks                                    -->
        <!-- See http://checkstyle.sf.net/config_modifiers.html -->
        <!-- Check modifier order:          -->
        <!--   public | protected | private -->
        <!--   abstract                     -->
        <!--   static                       -->
        <!--   final                        -->
        <!--   transient | volatile         -->
        <!--   synchronized                 -->
        <!--   native                       -->
        <!--   strictfp                     -->
        <module name="ModifierOrder">
            <property name="severity" value="error"/>
        </module>

        <module name="RedundantModifier"/>

        <!-- Checks for blocks. You know, those {}'s         -->
        <!-- See http://checkstyle.sf.net/config_blocks.html -->
        <module name="AvoidNestedBlocks"/>

        <module name="EmptyBlock"/>

        <module name="LeftCurly">
            <property name="severity" value="error"/>
        </module>

        <module name="NeedBraces">
            <property name="severity" value="error"/>
        </module>

        <module name="RightCurly"/>

        <module name="RightCurly">
            <property name="option" value="alone"/>
            <property name="tokens"
                      value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, STATIC_INIT, INSTANCE_INIT"/>
        </module>

        <!-- Checks that classes that define a covariant equals() method -->
        <!-- also override method equals(java.lang.Object)               -->
        <module name="CovariantEquals"/>

        <!-- Checks for common coding problems               -->
        <!-- See http://checkstyle.sf.net/config_coding.html -->
        <!--<module name="AvoidInlineConditionals"/>-->

        <module name="EmptyStatement"/>

        <!-- Checks that classes that override equals() -->
        <!-- also override hashCode() -->
        <module name="EqualsHashCode"/>

        <module name="HiddenField">
            <property name="ignoreConstructorParameter" value="true"/>
            <property name="ignoreSetter" value="true"/>
        </module>

        <module name="IllegalInstantiation"/>

        <module name="InnerAssignment"/>

        <module name="MagicNumber"/>

        <module name="MissingSwitchDefault"/>

        <module name="SimplifyBooleanExpression"/>

        <module name="SimplifyBooleanReturn"/>

        <!-- Checks for class design                         -->
        <!-- See http://checkstyle.sf.net/config_design.html -->
        <!-- Require classes to be either abstract or final -->
        <!-- Enable for API type of projects -->
        <!--<module name="DesignForExtension"/>-->

        <!-- Class with private constructor must be final -->
        <module name="FinalClass"/>

        <!-- Utility classes should have private ctor -->
        <module name="HideUtilityClassConstructor"/>

        <module name="InterfaceIsType"/>

        <!-- Make sure only static finals are public -->
        <module name="VisibilityModifier">
            <property name="protectedAllowed" value="true"/>
        </module>

        <!-- Miscellaneous other checks.                   -->
        <!-- See http://checkstyle.sf.net/config_misc.html -->
        <!-- Array brackets on type not varaible -->
        <module name="ArrayTypeStyle"/>

        <!--<module name="FinalParameters"/>-->
        <!-- Identify TODOs -->
        <module name="TodoComment">
            <property name="format" value="TODO"/>
        </module>

        <!-- Require long constants to be defined by uppercase L -->
        <module name="UpperEll"/>

        <module name="OverloadMethodsDeclarationOrder"/>

        <module name="VariableDeclarationUsageDistance"/>

        <module name="EmptyCatchBlock">
            <property name="exceptionVariableName" value="expected"/>
        </module>

        <module name="CommentsIndentation"/>

        <!-- Avoid modifying control variables -->
        <module name="ModifiedControlVariable"/>

        <!-- Capture string compare using == -->
        <module name="StringLiteralEquality"/>

        <!-- Checks that an overriding clone() method invokes super.clone() -->
        <module name="SuperClone"/>

        <!-- Disallow catcing exception base classes -->
        <module name="IllegalCatch"/>

        <!-- Disallow throwing exception base classes -->
        <module name="IllegalThrows"/>

        <!-- Require all classes to be in a package -->
        <module name="PackageDeclaration"/>

        <!-- Enforce the following declaration order: -->
        <!--   1. Class variables    -->
        <!--   2. Instance variables -->
        <!--   3. Ctors              -->
        <!--   4. Methods            -->
        <module name="DeclarationOrder">
            <property name="severity" value="error"/>
        </module>

        <!-- Disallow parameter assignment -->
        <module name="ParameterAssignment"/>

        <!-- Avoid explicit initialization to the default value -->
        <module name="ExplicitInitialization"/>

        <!-- Ensure the default clasue is the last case in a switch -->
        <module name="DefaultComesLast"/>

        <!-- Ensures that exception classes are immutable -->
        <module name="MutableException"/>

        <!-- Flag overly complex constructions -->
        <module name="ClassFanOutComplexity"/>

        <module name="CyclomaticComplexity">
            <property name="max" value="20"/>
        </module>

        <module name="NPathComplexity"/>

        <!-- Trap trailing spaces -->
        <module name="RegexpSinglelineJava">
            <property name="severity" value="error"/>
            <property name="format" value="\s+$"/>
            <property name="message" value="Line has trailing spaces."/>
        </module>

        <!-- Flag uncommented main() methods (debugging left-overs) -->
        <module name="UncommentedMain"/>

        <!-- Avoid trailing comments -->
        <module name="TrailingComment"/>

        <!-- Ensure certian import order -->
        <!--<module name="ImportOrder">-->
        <!--<property name="groups" value="java,javax"/>-->
        <!--<property name="ordered" value="true"/>-->
        <!--<property name="separated" value="true"/>-->
        <!--</module>-->

        <module name="Regexp">
            <property name="format" value="System\.out\.print"/>
            <property name="illegalPattern" value="true"/>
            <property name="ignoreComments" value="true"/>
            <property name="severity" value="error"/>
        </module>

    </module>

</module>
